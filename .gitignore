# -*- coding: utf-8 -*-
"""
Primera parte parcial ELMA2 - 2023-2
"""
import numpy as np
import matplotlib.pyplot as plt
import math



def diagrama_momentos():
    # Datos del diagrama de momentos
    distancias = [0, 3, 4, 6, 8, 10] # Distancias desde el extremo izquierdo del objeto
    momentos = [0, 5, 8, 10, 8, 4] # Momentos en cada distancia

    # Crear el gráfico
    plt.plot(distancias, momentos, 'ro-') # 'ro-' significa puntos rojos conectados con líneas
    plt.xlabel('Distancia (m)')
    plt.ylabel('Momento (kN*m)')
    plt.title('Diagrama de Momentos')

    # Mostrar el gráfico
    plt.show()
    


    # Datos del diagrama de cortantes
    distancias = [0, 2, 2, 4, 6, 8, 10] # Distancias desde el extremo izquierdo del objeto
    cortantes = [2, 2, 4, 4, 4, 6,6] # Cortantes en cada distancia

    # Crear el gráfico
    plt.plot(distancias, cortantes, 'b.-') # 'b.-' significa puntos azules conectados con líneas y puntos
    plt.xlabel('Distancia (m)')
    plt.ylabel('Cortante (kN)')
    plt.title('Diagrama de Cortantes')

    # Mostrar el gráfico
    plt.show()
    
def goodman_mod():

     #Definir los datos de entrada
     Sut = 650 # Resistencia a la tracción (MPa)
     Sy = 500 # Límite elástico (MPa)
     Se = 320 # Resistencia a la fatiga en el rango elástico (MPa)
     C = -0.5 # Gradiente de resistencia a la fatiga
     
     # Crear una función que calcule la resistencia a la fatiga en el rango plástico
     def Se_p(Sut, Sy, Se, C, sigma_a):
         return Se + C * (Sut - Sy - sigma_a)
     
     # Crear un arreglo de valores de sigma_a
     sigma_a = np.linspace(0, Sy, 100)
        
     # Calcular la resistencia a la fatiga en el rango plástico para cada valor de sigma_a
     Se_p_values = Se_p(Sut, Sy, Se, C, sigma_a)
        
     # Graficar el diagrama de Goodman modificado
     plt.plot(sigma_a, Se / (1 - sigma_a / Sy), 'k-', label='Curva de Goodman')
     plt.plot(sigma_a, Se_p_values / (1 - sigma_a / Sut), 'r-', label='Curva de Gerber')
     plt.axhline(y=0, color='k')
     plt.axvline(x=0, color='k')
     plt.xlabel('Tensión media (MPa)')
     plt.ylabel('Tensión alternante (MPa)')
     plt.legend()
     plt.show()



def materiales():
    Sut1=627
    Sy1=531
    Sut2=1020
    Sy2=655
    print("\n Se tienen los siguientes materiales predefinidos para "
    "el desarrollo del ejercicio: \n Acero AISI 1045 rolado en frío"
    "con Sut=", Sut1, "MPa y Sy=", Sy1,"MPa \n                   Y "
    "\n Acero SAE 4140 normalizado @1650°F con Sut=", Sut2, "MPa y Sy=", Sy2, "MPa")
    mat=input ("¿Desea añadir un material?")
    #CARACTERISTICAS DEL MATERIAL
    if mat=='SI' or mat=='Si' or mat=='sI' or mat=='si' or mat=="1":
        print("\n A continuación introduzca los datos de su material")
        nombre=input("\n Ingrese el nombre del material:")
        Sut3=int(input("\n Ingrese el esfuerzo ultimo del material en MPA:"))
        Sy3=int(input("\n Ingrese el esfuerzo de fluencia del material en MPA:"))
        print ("\n Su material es:", nombre, "con Sut=", Sut3, "MPa y Sy=", Sy3, "MPa")
    else:
        None
    

def pregunta_cargas():
    ref=0
    punto1=0
    punto2=0
    punto3=0
    punto4=0
    punto5=0
    r1=str
    while ref!=1:
        if punto1==0:
            print ("VARIABLES PARA A")
            Ax=float(input("INGRESE FUERZA EN X en N: "))
            Ay=float(input("INGRESE FUERZAS EN Y en N: "))
            Az=float(input("INGRESE FUERZA EN Z en N: "))
            Ma_x=float(input("INGRESE MOMENTO EN X en Nm: "))
            Ma_y=float(input("INGRESE MOMENTO EN Y en Nm: "))
            Ma_z=float(input("INGRESE MOMENTO EN Z en Nm: "))
            punto1=punto1+1
        if punto2==0:
            print ("VARIABLES PARA B")
            Bx=float(input("INGRESE FUERZA EN X en N: "))
            By=float(input("INGRESE FUERZAS EN Y en N: "))
            Bz=float(input("INGRESE FUERZA EN Z en N: "))
            Mb_x=float(input("INGRESE MOMENTO EN X en Nm: "))
            Mb_y=float(input("INGRESE MOMENTO EN Y en Nm: "))
            Mb_z=float(input("INGRESE MOMENTO EN Z en Nm: "))
            punto2=punto2+1
        if punto3==0:
            print ("VARIABLES PARA C")
            Cx=float(input("INGRESE FUERZA EN X en N: "))
            Cy=float(input("INGRESE FUERZAS EN Y en N: "))
            Cz=float(input("INGRESE FUERZA EN Z en N: "))
            Mc_x=float(input("INGRESE MOMENTO EN X en Nm: "))
            Mc_y=float(input("INGRESE MOMENTO EN Y en Nm: "))
            Mc_z=float(input("INGRESE MOMENTO EN Z en Nm: "))
            punto3=punto3+1
        if punto4==0:
            print ("VARIABLES PARA D")
            Dx=float(input("INGRESE FUERZA EN X en N: "))
            Dy=float(input("INGRESE FUERZAS EN Y en N: "))
            Dz=float(input("INGRESE FUERZA EN Z en N: "))
            Md_x=float(input("INGRESE MOMENTO EN X en Nm: "))
            Md_y=float(input("INGRESE MOMENTO EN Y en Nm: "))
            Md_z=float(input("INGRESE MOMENTO EN Z en Nm: "))
            punto4=punto4+1
        if punto5==0:
            print ("VARIABLES PARA E")
            Cx=float(input("INGRESE FUERZA EN X en N: "))
            Cy=float(input("INGRESE FUERZAS EN Y en N: "))
            Cz=float(input("INGRESE FUERZA EN Z en N: "))
            Mc_x=float(input("INGRESE MOMENTO EN X en Nm: "))
            Mc_y=float(input("INGRESE MOMENTO EN Y en Nm: "))
            Mc_z=float(input("INGRESE MOMENTO EN Z en Nm: "))
            punto5=punto5+1
            r1=input("¿Desea corregir algun punto? ")
        if r1=='SI' or r1=='Si' or r1=='sI' or r1=='si':
            r2=input("¿Que punto desea corregir desea corregir? ")
            if r2=='A' or r2=='a':
                punto1=0
            if r2=='B' or r2=='b':
                punto2=0
            if r2=='C' or r2=='c':
                punto3=0
            if r2=='D' or r2=='d':
                punto4=0
            if r2=='E' or r2=='e':
                punto5=0
        if r1=='NO' or r1=='No' or r1=='nO' or r1=='no':
            ref=ref+1
            r1=='as'
            ref=1
    print("Las fuerzas y momentos se han añadido con exito")
                                                        
def main():
    print("Este código fue desarrollado por:" 
        "\n Miguel Esteban Reina Cabra CC 1010122710"
        "\n William Alejandro Merchan Herrera CC 1000835175 \n")
    materiales()
    #diagrama_momentos()
    #goodman_mod()
    pregunta_cargas()
main()
